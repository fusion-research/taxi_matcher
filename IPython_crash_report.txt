***************************************************************************

IPython post-mortem report

IPython version: 0.10.2 

Platform info  : os.name -> posix, sys.platform -> linux2

***************************************************************************

Current user configuration structure:

{'Version': 0,
 '__allownew': True,
 'alias': [],
 'args': [],
 'autocall': 1,
 'autoedit_syntax': 0,
 'autoexec': [],
 'autoindent': 0,
 'automagic': 1,
 'banner': 1,
 'c': '',
 'cache_size': 1000,
 'classic': 0,
 'color_info': 0,
 'colors': 'NoColor',
 'confirm_exit': 1,
 'debug': 0,
 'deep_reload': 0,
 'editor': '0',
 'execfile': [],
 'execute': [],
 'gthread': 0,
 'help': 0,
 'import_all': [],
 'import_mod': [],
 'import_some': [[]],
 'include': [],
 'interact': 0,
 'ipythondir': u'/afs/athena.mit.edu/user/y/y/yygu/.ipython',
 'log': 0,
 'logfile': '',
 'logplay': '',
 'magic_docstrings': 0,
 'messages': 1,
 'multi_line_specials': 1,
 'nosep': 0,
 'object_info_string_level': 0,
 'opts': Struct({'__allownew': True}),
 'pdb': 0,
 'pprint': 0,
 'profile': '',
 'prompt_in1': 'In [\\#]: ',
 'prompt_in2': '   .\\D.: ',
 'prompt_out': 'Out[\\#]: ',
 'prompts_pad_left': 1,
 'pydb': 0,
 'pylab': 0,
 'pylab_import_all': 1,
 'q4thread': 0,
 'qthread': 0,
 'quick': 0,
 'quiet': 0,
 'rcfile': 'ipythonrc',
 'readline': 1,
 'readline_merge_completions': 1,
 'readline_omit__names': 0,
 'readline_parse_and_bind': [],
 'readline_remove_delims': '',
 'screen_length': 0,
 'separate_in': '\n',
 'separate_out': '\n',
 'separate_out2': '',
 'system_header': 'IPython system call: ',
 'system_verbose': 0,
 'term_title': 1,
 'tk': 0,
 'upgrade': 0,
 'wildcards_case_sensitive': 1,
 'wthread': 0,
 'wxversion': '0',
 'xmode': 'Context'}

***************************************************************************

Crash traceback:

---------------------------------------------------------------------------
OSError                                       Python 2.7.1: /usr/bin/python
                                                   Tue Jan 17 16:18:57 2012
A problem occured executing Python code.  Here is the sequence of function
calls leading up to the error, with the most recent (innermost) call last.

/afs/athena.mit.edu/user/y/y/yygu/Scripts/django/Site/manage.py in <module>()
      1 
      2 
      3 #!/usr/bin/env python
      4 from django.core.management import execute_manager
      5 import imp
      6 try:
      7     imp.find_module('settings') # Assumed to be in the same directory.
      8 except ImportError:
      9     import sys
     10     sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n" % __file__)
     11     sys.exit(1)
     12 
     13 import settings
---> 14 
        global execute_manager = <function execute_manager at 0x27265f0>
        global settings = <module 'settings' from '/afs/athena.mit.edu/user/y/y/yygu/Scripts/django/Site/settings.pyc'>
     15 if __name__ == "__main__":
     16     execute_manager(settings)
     17 
     18 
     19 
     20 
     21 
     22 
     23 
     24 
     25 
     26 
     27 
     28 
     29 
     30 
     31 

/usr/lib/python2.7/site-packages/django/core/management/__init__.pyc in execute_manager(settings_mod=<module 'settings' from '/afs/athena.mit.edu/user/y/y/yygu/Scripts/django/Site/settings.pyc'>, argv=None)
    423 
    424 def execute_from_command_line(argv=None):
    425     """
    426     A simple method that runs a ManagementUtility.
    427     """
    428     utility = ManagementUtility(argv)
    429     utility.execute()
    430 
    431 def execute_manager(settings_mod, argv=None):
    432     """
    433     Like execute_from_command_line(), but for use by manage.py, a
    434     project-specific django-admin.py utility.
    435     """
    436     setup_environ(settings_mod)
    437     utility = ManagementUtility(argv)
--> 438     utility.execute()
    439 
    440 
    441 
    442 
    443 
    444 
    445 
    446 
    447 
    448 
    449 
    450 
    451 
    452 
    453 

/usr/lib/python2.7/site-packages/django/core/management/__init__.pyc in execute(self=<django.core.management.ManagementUtility object>)
    364             if len(args) > 2:
    365                 self.fetch_command(args[2]).print_help(self.prog_name, args[2])
    366             else:
    367                 parser.print_lax_help()
    368                 sys.stderr.write(self.main_help_text() + '\n')
    369                 sys.exit(1)
    370         # Special-cases: We want 'django-admin.py --version' and
    371         # 'django-admin.py --help' to work, for backwards compatibility.
    372         elif self.argv[1:] == ['--version']:
    373             # LaxOptionParser already takes care of printing the version.
    374             pass
    375         elif self.argv[1:] in (['--help'], ['-h']):
    376             parser.print_lax_help()
    377             sys.stderr.write(self.main_help_text() + '\n')
    378         else:
--> 379             self.fetch_command(subcommand).run_from_argv(self.argv)
    380 
    381 def setup_environ(settings_mod, original_settings_path=None):
    382     """
    383     Configures the runtime environment. This can also be used by external
    384     scripts wanting to set up a similar environment to manage.py.
    385     Returns the project directory (assuming the passed settings module is
    386     directly in the project directory).
    387 
    388     The "original_settings_path" parameter is optional, but recommended, since
    389     trying to work out the original path from the module can be problematic.
    390     """
    391     # Add this project to sys.path so that it's importable in the conventional
    392     # way. For example, if this file (manage.py) lives in a directory
    393     # "myproject", this code would add "/path/to/myproject" to sys.path.
    394     if '__init__.py' in settings_mod.__file__:

/usr/lib/python2.7/site-packages/django/core/management/base.pyc in run_from_argv(self=<django.core.management.commands.shell.Command object>, argv=['manage.py', 'shell'])
    176         ``self.usage()``.
    177 
    178         """
    179         parser = self.create_parser(prog_name, subcommand)
    180         parser.print_help()
    181 
    182     def run_from_argv(self, argv):
    183         """
    184         Set up any environment changes requested (e.g., Python path
    185         and Django settings), then run this command.
    186 
    187         """
    188         parser = self.create_parser(argv[0], argv[1])
    189         options, args = parser.parse_args(argv[2:])
    190         handle_default_options(options)
--> 191         self.execute(*args, **options.__dict__)
        global s = undefined
        global appname = undefined
        global appname...c = undefined
    192 
    193     def execute(self, *args, **options):
    194         """
    195         Try to execute this command, performing model validation if
    196         needed (as controlled by the attribute
    197         ``self.requires_model_validation``). If the command raises a
    198         ``CommandError``, intercept it and print it sensibly to
    199         stderr.
    200 
    201         """
    202         # Switch to English, because django-admin.py creates database content
    203         # like permissions, and those shouldn't contain any translations.
    204         # But only do this if we can assume we have a working settings file,
    205         # because django.utils.translation requires settings.
    206         if self.can_import_settings:

/usr/lib/python2.7/site-packages/django/core/management/base.pyc in execute(self=<django.core.management.commands.shell.Command object>, *args=(), **options={'plain': None, 'pythonpath': None, 'settings': None, 'traceback': None, 'verbosity': '1'})
    205         # because django.utils.translation requires settings.
    206         if self.can_import_settings:
    207             try:
    208                 from django.utils import translation
    209                 translation.activate('en-us')
    210             except ImportError, e:
    211                 # If settings should be available, but aren't,
    212                 # raise the error and quit.
    213                 sys.stderr.write(smart_str(self.style.ERROR('Error: %s\n' % e)))
    214                 sys.exit(1)
    215         try:
    216             self.stdout = options.get('stdout', sys.stdout)
    217             self.stderr = options.get('stderr', sys.stderr)
    218             if self.requires_model_validation:
    219                 self.validate()
--> 220             output = self.handle(*args, **options)
        global t = undefined
        global d = undefined
        global S = undefined
        global s = undefined
        global Perform = undefined
        global the = undefined
        global command = undefined
        global actions = undefined
        global label = undefined
        global which = undefined
        global will = undefined
        global be = undefined
        global string = undefined
        global given = undefined
        global on = undefined
        global line.N = undefined
        global R = undefined
        global Rj = undefined
        global usr = undefined
        global lib = undefined
        global python2 = undefined
        global site = undefined
        global packages = undefined
        global django = <module 'django' from '/usr/lib/python2.7/site-packages/django/__init__.pyc'>
        global core = undefined
        global management = undefined
        global base.pyRk = undefined
        global G = undefined
        global RG = undefined
        global Rk = undefined
        global base.pyRi = undefined
        global NoArgsCommandc = undefined
        global B = undefined
        e = undefined
        global Z = undefined
        global RS = undefined
        global s8 = undefined
        global A = undefined
        global takes = undefined
        global no = undefined
        global arguments = undefined
        global line.Rather = undefined
        global than = undefined
        global implementing = undefined
        global handle = undefined
        global subclasses = undefined
        global must = undefined
        global implement = undefined
        global handle_noargs = undefined
        global itself = undefined
        global overridden = undefined
        global to = undefined
        global ensure = undefined
        global are = undefined
        global passed = undefined
        global command.Attempting = undefined
        global CommandError.r = undefined
        global n = undefined
        global j = undefined
        global Ns = undefined
        global Command = undefined
        global doesn = undefined
        global accept = undefined
        global any = undefined
        global base.pyRG = undefined
        global c = undefined
        global K = undefined
        global s2 = undefined
        global this = undefined
        global actions.N = undefined
        global base.pyRo = undefined
        global a = undefined
        global Ro = undefined
        global base.pyRn = undefined
        global O = undefined
        global C = undefined
        global l = undefined
        global i = undefined
        global f = undefined
        global y = undefined
        global Wn = undefined
        global k = undefined
        global r = undefined
        global Xt = undefined
        global x = undefined
        global D = undefined
        global rR = undefined
        global x.D = undefined
        global rZ = undefined
        global qZ = undefined
        global Wx = undefined
        global q = undefined
        global Wq = undefined
        global Xq = undefined
        global Wd = undefined
        global Copies = undefined
        global either = undefined
        global Django = undefined
        global application = undefined
        global layout = undefined
        global template = undefined
        global project = undefined
        global into = undefined
        global specified = undefined
        global directory.i = undefined
        global NRW = undefined
        global projects = undefined
        global _a = undefined
        global zA = undefined
        global w = undefined
        global s5 = undefined
        global make = undefined
        global sure = undefined
        global name = undefined
        global begins = undefined
        global letter = undefined
        global underscores = undefined
        global use = undefined
        global only = undefined
        global numbers = undefined
        global letters = undefined
        global underscoress = undefined
        global valid = undefined
        global name.Please = undefined
        global s.i = undefined
        global confs = undefined
        global s_templatei = undefined
        global s_namet.s.pyt = undefined
        global rt = undefined
        global ws = undefined
        global s_name = undefined
        global sl = undefined
        global Notice = undefined
        global Couldn = undefined
        global re = undefined
        global probably = undefined
        global using = undefined
        global an = undefined
        global uncommon = undefined
        global filesystem = undefined
        global setup.No = undefined
        global problem.t = undefined
        global ret = undefined
        global shutilt = undefined
        global searchR = undefined
        global Rd = undefined
        global mkdirt = undefined
        global OSErrorR = undefined
        global __path__t = undefined
        global walkt = undefined
        global lent = undefined
        global replacet = undefined
        global startswitht = undefined
        global removet = undefined
        global endswitht = undefined
        global openRA = undefined
        global RV = undefined
        global closet = undefined
        global copymodet = undefined
        global _make_writeableR = undefined
        global R9 = undefined
        global NOTICE = undefined
        global other_nameRu = undefined
        global Rv = undefined
        global othert = undefined
        global messaget = undefined
        global top_dirRM = undefined
        global template_dirt = undefined
        global dt = undefined
        global subdirst = undefined
        global filest = undefined
        global relative_dirt = undefined
        global subdirt = undefined
        global ft = undefined
        global path_oldt = undefined
        global path_newt = undefined
        global fp_oldt = undefined
        global fp_new = undefined
        global base.pyt = undefined
        global copy_helperh = undefined
        global sH = undefined
        global sv = undefined
        global St = undefined
        global sr = undefined
        global sW = undefined
        global Make = undefined
        global that = undefined
        global file = undefined
        global writeable.Useful = undefined
        global our = undefined
        global source = undefined
        global read = undefined
        global only.i = undefined
        global Nt = undefined
        global java = undefined
        global statR = undefined
        global platformR = undefined
        global accesst = undefined
        global W_OKt = undefined
        global S_IMODEt = undefined
        global st_modet = undefined
        global S_IWUSRt = undefined
        global chmod = undefined
        global filenameR = undefined
        global stt = undefined
        global new_permissions = undefined
        global base.pyR = undefined
        global optparseR = undefined
        global django.core.exceptionsR = undefined
        global django.core.management.colorR = undefined
        global django.utils.encodingR = undefined
        global ExceptionR = undefined
        global objectR = undefined
        global R_ = undefined
        global Ri = undefined
        global Rn = undefined
        global module = undefined
    221             if output:
    222                 if self.output_transaction:
    223                     # This needs to be imported here, because it relies on
    224                     # settings.
    225                     from django.db import connections, DEFAULT_DB_ALIAS
    226                     connection = connections[options.get('database', DEFAULT_DB_ALIAS)]
    227                     if connection.ops.start_transaction_sql():
    228                         self.stdout.write(self.style.SQL_KEYWORD(connection.ops.start_transaction_sql()) + '\n')
    229                 self.stdout.write(output)
    230                 if self.output_transaction:
    231                     self.stdout.write('\n' + self.style.SQL_KEYWORD("COMMIT;") + '\n')
    232         except CommandError, e:
    233             self.stderr.write(smart_str(self.style.ERROR('Error: %s\n' % e)))
    234             sys.exit(1)
    235 

/usr/lib/python2.7/site-packages/django/core/management/base.pyc in handle(self=<django.core.management.commands.shell.Command object>, *args=(), **options={'plain': None, 'pythonpath': None, 'settings': None, 'traceback': None, 'verbosity': '1'})
    336     """
    337     A command which takes no arguments on the command line.
    338 
    339     Rather than implementing ``handle()``, subclasses must implement
    340     ``handle_noargs()``; ``handle()`` itself is overridden to ensure
    341     no arguments are passed to the command.
    342 
    343     Attempting to pass arguments will raise ``CommandError``.
    344 
    345     """
    346     args = ''
    347 
    348     def handle(self, *args, **options):
    349         if args:
    350             raise CommandError("Command doesn't accept any arguments")
--> 351         return self.handle_noargs(**options)
    352 
    353     def handle_noargs(self, **options):
    354         """
    355         Perform this command's actions.
    356 
    357         """
    358         raise NotImplementedError()
    359 
    360 def copy_helper(style, app_or_project, name, directory, other_name=''):
    361     """
    362     Copies either a Django application layout template or a Django project
    363     layout template into the specified directory.
    364 
    365     """
    366     # style -- A color style object (see django.core.management.color).

/usr/lib/python2.7/site-packages/django/core/management/commands/shell.pyc in handle_noargs(self=<django.core.management.commands.shell.Command object>, **options={'plain': None, 'pythonpath': None, 'settings': None, 'traceback': None, 'verbosity': '1'})
     40                 pass
     41         raise ImportError
     42 
     43     def handle_noargs(self, **options):
     44         # XXX: (Temporary) workaround for ticket #1796: force early loading of all
     45         # models from installed apps.
     46         from django.db.models.loading import get_models
     47         loaded_models = get_models()
     48 
     49         use_plain = options.get('plain', False)
     50 
     51         try:
     52             if use_plain:
     53                 # Don't bother loading IPython, because the user wants plain Python.
     54                 raise ImportError
---> 55             self.run_shell()
     56         except ImportError:
     57             import code
     58             # Set up a dictionary to serve as the environment for the shell, so
     59             # that tab completion works on objects that are imported at runtime.
     60             # See ticket 5082.
     61             imported_objects = {}
     62             try: # Try activating rlcompleter, because it's handy.
     63                 import readline
     64             except ImportError:
     65                 pass
     66             else:
     67                 # We don't have to wrap the following import in a 'try', because
     68                 # we already know 'readline' was imported successfully.
     69                 import rlcompleter
     70                 readline.set_completer(rlcompleter.Completer(imported_objects).complete)

/usr/lib/python2.7/site-packages/django/core/management/commands/shell.pyc in run_shell(self=<django.core.management.commands.shell.Command object>)
     23             try:
     24                 from IPython.Shell import IPShell
     25                 shell = IPShell(argv=[])
     26                 shell.mainloop()
     27             except ImportError:
     28                 # IPython not found at all, raise ImportError
     29                 raise
     30 
     31     def bpython(self):
     32         import bpython
     33         bpython.embed()
     34 
     35     def run_shell(self):
     36         for shell in self.shells:
     37             try:
---> 38                 return getattr(self, shell)()
        global R = undefined
        global t = undefined
        global django.core.management.baseR = undefined
        global optparseR = undefined
        global sI = undefined
        global usr = undefined
        global lib = undefined
        global python2 = undefined
        global site = undefined
        global packages = undefined
        global django = undefined
        global core = undefined
        global management = undefined
        global commands = undefined
        shell.pyt = undefined
        global module = undefined
        global s = undefined
     39             except ImportError:
     40                 pass
     41         raise ImportError
     42 
     43     def handle_noargs(self, **options):
     44         # XXX: (Temporary) workaround for ticket #1796: force early loading of all
     45         # models from installed apps.
     46         from django.db.models.loading import get_models
     47         loaded_models = get_models()
     48 
     49         use_plain = options.get('plain', False)
     50 
     51         try:
     52             if use_plain:
     53                 # Don't bother loading IPython, because the user wants plain Python.

/usr/lib/python2.7/site-packages/django/core/management/commands/shell.pyc in ipython(self=<django.core.management.commands.shell.Command object>)
     10     help = "Runs a Python interactive interpreter. Tries to use IPython, if it's available."
     11     shells = ['ipython', 'bpython']
     12     requires_model_validation = False
     13 
     14     def ipython(self):
     15         try:
     16             from IPython.frontend.terminal.embed import TerminalInteractiveShell
     17             shell = TerminalInteractiveShell()
     18             shell.mainloop()
     19         except ImportError:
     20             # IPython < 0.11
     21             # Explicitly pass an empty list as arguments, because otherwise
     22             # IPython would use sys.argv from this script.
     23             try:
     24                 from IPython.Shell import IPShell
---> 25                 shell = IPShell(argv=[])
        global r = undefined
        global q = undefined
        global Xn = undefined
        global d = undefined
        global l = undefined
     26                 shell.mainloop()
     27             except ImportError:
     28                 # IPython not found at all, raise ImportError
     29                 raise
     30 
     31     def bpython(self):
     32         import bpython
     33         bpython.embed()
     34 
     35     def run_shell(self):
     36         for shell in self.shells:
     37             try:
     38                 return getattr(self, shell)()
     39             except ImportError:
     40                 pass

/usr/lib/python2.7/site-packages/IPython/Shell.pyc in __init__(self=<IPython.Shell.IPShell instance>, argv=[], user_ns=None, user_global_ns=None, debug=1, shell_class=<class 'IPython.iplib.InteractiveShell'>)
     58 # Default timeout for waiting for multithreaded shells (in seconds)
     59 GUI_TIMEOUT = 10
     60 
     61 #-----------------------------------------------------------------------------
     62 # This class is trivial now, but I want to have it in to publish a clean
     63 # interface. Later when the internals are reorganized, code that uses this
     64 # shouldn't have to change.
     65 
     66 class IPShell:
     67     """Create an IPython instance."""
     68     
     69     def __init__(self,argv=None,user_ns=None,user_global_ns=None,
     70                  debug=1,shell_class=InteractiveShell):
     71         self.IP = make_IPython(argv,user_ns=user_ns,
     72                                user_global_ns=user_global_ns,
---> 73                                debug=debug,shell_class=shell_class)
        global For = undefined
        global more = undefined
        global details = undefined
        global see = undefined
        global the = undefined
        global __call__ = undefined
        global method = undefined
        global below. = undefined
     74 
     75     def mainloop(self,sys_exit=0,banner=None):
     76         self.IP.mainloop(banner)
     77         if sys_exit:
     78             sys.exit()
     79 
     80 #-----------------------------------------------------------------------------
     81 def kill_embedded(self,parameter_s=''):
     82     """%kill_embedded : deactivate for good the current embedded IPython.
     83 
     84     This function (after asking for confirmation) sets an internal flag so that
     85     an embedded IPython will never activate again.  This is useful to
     86     permanently disable a shell that is being called inside a loop: once you've
     87     figured out what you needed from it, you may then kill it and the program
     88     will then continue to run without the interactive shell interfering again.

/usr/lib/python2.7/site-packages/IPython/ipmaker.pyc in make_IPython(argv=[], user_ns=None, user_global_ns=None, debug=1, rc_override=None, shell_class=<class 'IPython.iplib.InteractiveShell'>, embedded=False, **kw={})
    506     # tweaks. Basically options which affect other options. I guess this
    507     # should just be written so that options are fully orthogonal and we
    508     # wouldn't worry about this stuff!
    509 
    510     if IP_rc.classic:
    511         IP_rc.quick = 1
    512         IP_rc.cache_size = 0
    513         IP_rc.pprint = 0
    514         IP_rc.prompt_in1 = '>>> '
    515         IP_rc.prompt_in2 = '... '
    516         IP_rc.prompt_out = ''
    517         IP_rc.separate_in = IP_rc.separate_out = IP_rc.separate_out2 = '0'
    518         IP_rc.colors = 'NoColor'
    519         IP_rc.xmode = 'Plain'
    520 
--> 521     IP.pre_config_initialization()
    522     # configure readline
    523 
    524     # update exception handlers with rc file status
    525     otrap.trap_out()  # I don't want these messages ever.
    526     IP.magic_xmode(IP_rc.xmode)
    527     otrap.release_out()
    528 
    529     # activate logging if requested and not reloading a log
    530     if IP_rc.logplay:
    531         IP.magic_logstart(IP_rc.logplay + ' append')
    532     elif  IP_rc.logfile:
    533         IP.magic_logstart(IP_rc.logfile)
    534     elif IP_rc.log:
    535         IP.magic_logstart()
    536 

/usr/lib/python2.7/site-packages/IPython/iplib.pyc in pre_config_initialization(self=<IPython.iplib.InteractiveShell object>)
    820                           self.user_ns,  # globals
    821                           # Skip our own frame in searching for locals:
    822                           sys._getframe(depth+1).f_locals # locals
    823                           ))
    824 
    825     def pre_config_initialization(self):
    826         """Pre-configuration init method
    827 
    828         This is called before the configuration files are processed to
    829         prepare the services the config files might need.
    830         
    831         self.rc already has reasonable default values at this point.
    832         """
    833         rc = self.rc
    834         try:
--> 835             self.db = pickleshare.PickleShareDB(rc.ipythondir + "/db")
        global Optional = undefined
        global inputs = undefined
    836         except exceptions.UnicodeDecodeError:
    837             print "Your ipythondir can't be decoded to unicode!"
    838             print "Please set HOME environment variable to something that"
    839             print r"only has ASCII characters, e.g. c:\home"
    840             print "Now it is",rc.ipythondir
    841             sys.exit()
    842         self.shadowhist = IPython.history.ShadowHist(self.db)
    843 
    844     def post_config_initialization(self):
    845         """Post configuration init method
    846 
    847         This is called after the configuration files have been processed to
    848         'finalize' the initialization."""
    849 
    850         rc = self.rc

/usr/lib/python2.7/site-packages/IPython/Extensions/pickleshare.pyc in __init__(self=PickleShareDB('/afs/athena.mit.edu/user/y/y/yygu/.ipython/db'), root=u'/afs/athena.mit.edu/user/y/y/yygu/.ipython/db')
     39 import UserDict
     40 import warnings
     41 import glob
     42 
     43 def gethashfile(key):
     44     return ("%02x" % abs(hash(key) % 256))[-2:]
     45 
     46 _sentinel = object()
     47 
     48 class PickleShareDB(UserDict.DictMixin):
     49     """ The main 'connection' object for PickleShare database """
     50     def __init__(self,root):
     51         """ Return a db object that will manage the specied directory"""
     52         self.root = Path(root).expanduser().abspath()
     53         if not self.root.isdir():
---> 54             self.root.makedirs()
     55         # cache has { 'key' : (obj, orig_mod_time) }
     56         self.cache = {}
     57         
     58 
     59     def __getitem__(self,key):
     60         """ db['key'] reading """
     61         fil = self.root / key
     62         try:
     63             mtime = (fil.stat()[stat.ST_MTIME])
     64         except OSError:
     65             raise KeyError(key)
     66 
     67         if fil in self.cache and mtime == self.cache[fil][1]:
     68             return self.cache[fil][0]
     69         try:

/usr/lib/python2.7/site-packages/IPython/external/path/_path.pyc in makedirs(self=path('/afs/athena.mit.edu/user/y/y/yygu/.ipython/db'), mode=511)
    878             os.chown(self, uid, gid)
    879 
    880     def rename(self, new):
    881         os.rename(self, new)
    882 
    883     def renames(self, new):
    884         os.renames(self, new)
    885 
    886 
    887     # --- Create/delete operations on directories
    888 
    889     def mkdir(self, mode=0777):
    890         os.mkdir(self, mode)
    891 
    892     def makedirs(self, mode=0777):
--> 893         os.makedirs(self, mode)
    894 
    895     def rmdir(self):
    896         os.rmdir(self)
    897 
    898     def removedirs(self):
    899         os.removedirs(self)
    900 
    901 
    902     # --- Modifying operations on files
    903 
    904     def touch(self):
    905         """ Set the access/modified times of this file to the current time.
    906         Create the file if it does not exist.
    907         """
    908         fd = os.open(self, os.O_WRONLY | os.O_CREAT, 0666)

/usr/lib64/python2.7/os.pyc in makedirs(name=path('/afs/athena.mit.edu/user/y/y/yygu/.ipython/db'), mode=511)
    135 
    136 def makedirs(name, mode=0777):
    137     """makedirs(path [, mode=0777])
    138 
    139     Super-mkdir; create a leaf directory and all intermediate ones.
    140     Works like mkdir, except that any intermediate path segment (not
    141     just the rightmost) will be created if it does not exist.  This is
    142     recursive.
    143 
    144     """
    145     head, tail = path.split(name)
    146     if not tail:
    147         head, tail = path.split(head)
    148     if head and tail and not path.exists(head):
    149         try:
--> 150             makedirs(head, mode)
        global os.path = undefined
        global join = undefined
        global getsize = undefined
    151         except OSError, e:
    152             # be happy if someone already created the path
    153             if e.errno != errno.EEXIST:
    154                 raise
    155         if tail == curdir:           # xxx/newdir/. exists if xxx/newdir exists
    156             return
    157     mkdir(name, mode)
    158 
    159 def removedirs(name):
    160     """removedirs(path)
    161 
    162     Super-rmdir; remove a leaf directory and all empty intermediate
    163     ones.  Works like rmdir except that, if the leaf directory is
    164     successfully removed, directories corresponding to rightmost path
    165     segments will be pruned away until either the whole path is

/usr/lib64/python2.7/os.pyc in makedirs(name='/afs/athena.mit.edu/user/y/y/yygu/.ipython', mode=511)
    142     recursive.
    143 
    144     """
    145     head, tail = path.split(name)
    146     if not tail:
    147         head, tail = path.split(head)
    148     if head and tail and not path.exists(head):
    149         try:
    150             makedirs(head, mode)
    151         except OSError, e:
    152             # be happy if someone already created the path
    153             if e.errno != errno.EEXIST:
    154                 raise
    155         if tail == curdir:           # xxx/newdir/. exists if xxx/newdir exists
    156             return
--> 157     mkdir(name, mode)
        global N = undefined
        global R = undefined
        global t = undefined
        global islinkt = undefined
        global joint = undefined
        global isdirt = undefined
        global listdirR = undefined
        global Nonet = undefined
        global appendt = undefined
        global walk = <function walk at 0x238ade8>
        global topt = undefined
        global topdownt = undefined
        global onerrort = undefined
        global followlinksR0 = undefined
        global R1 = undefined
        global R2 = undefined
        global namest = undefined
        global errt = undefined
        global dirst = undefined
        global nondirsR = undefined
        global new_patht = undefined
        global x = undefined
        global s = undefined
        global usr = undefined
        global lib64 = undefined
        global python2 = undefined
        global os.pyR6 = undefined
        global R6 = undefined
        global c = undefined
        global G = undefined
        global d = undefined
        global S = undefined
        global sp = undefined
        global execl = <function execl at 0x238ae60>
        global file = undefined
        global args = undefined
        global Execute = undefined
        global the = undefined
        global executable = undefined
        global argument = undefined
        global list = undefined
        global replacing = undefined
        global current = undefined
        global process.N = undefined
        global execv = <built-in function execv>
        global filet = undefined
        global os.pyt = undefined
        global execl3 = undefined
        global execle = <function execle at 0x238aed8>
        global env = undefined
        global environment = undefined
        global process.i = undefined
        global execve = <built-in function execve>
        global RB = undefined
        global RC = undefined
        global execlp = <function execlp at 0x238af50>
        global which = undefined
        global searched = undefined
        global along = undefined
        global PATH = undefined
        global execvp = <function execvp at 0x238b0c8>
        global execlpB = undefined
        global execlpe = <function execlpe at 0x238b050>
        global execvpe = <function execvpe at 0x238b140>
        global RF = undefined
        global execlpeI = undefined
        global C = undefined
        global process.args = undefined
        global may = undefined
        global be = undefined
        global a = undefined
        global tuple = undefined
        global of = undefined
        global strings.N = undefined
        global _execvpe = <function _execvpe at 0x238b1b8>
        global os.pyRH = undefined
        global RL = undefined
        global os.pyRJ = undefined
        global Z = undefined
        global RD = undefined
        global RG = undefined
        global RI = undefined
        global RK = undefined
        global RH = undefined
        global RJ = undefined
        global sZ = undefined
        global k = undefined
        global r = undefined
        global f = undefined
        global n = undefined
        global j = undefined
        global rb = undefined
        global Sd = undefined
        global D = undefined
        global y = undefined
        global Wq = undefined
        global r0 = undefined
        global r1 = undefined
        global q1 = undefined
        global q = undefined
        global Xq = undefined
        global W = undefined
        global rJ = undefined
        global Nt = undefined
        global PATHi = undefined
        global R4 = undefined
        global RE = undefined
        global RA = undefined
        global environR = undefined
        global syst = undefined
        global exc_infoR = undefined
        global ENOENTt = undefined
        global ENOTDIR = undefined
        global funct = undefined
        global argrestR = undefined
        global envpathRM = undefined
        global saved_exct = undefined
        global saved_tbR = undefined
        global fullnameR = undefined
        global tb = undefined
        global os.pyRL = undefined
        e = undefined
        global putenv = <built-in function putenv>
        global key = undefined
        global unsetenv = <built-in function unsetenv>
        global _EnvironR = undefined
        global B = undefined
        global Wn = undefined
        global rE = undefined
        global Xd = undefined
        global RS = undefined
        global sJ = undefined
        global Wd = undefined
        global UserDictt = undefined
        global __init__t = undefined
        global datat = undefined
        global itemst = undefined
        global upper = undefined
        global selfRN = undefined
        global Ra = undefined
        global kt = undefined
        global v = undefined
        global os.pyR = undefined
        global Rc = undefined
        global Rd = undefined
        global item = undefined
        global __setitem__ = undefined
        global __getitem__ = undefined
        global __delitem__ = undefined
        global os.pyRj = undefined
        global s2 = undefined
        global keysR = undefined
        global clear = undefined
        global has_key = undefined
        global __contains__ = undefined
        global getRc = undefined
        global failobj = undefined
        global os.pyRp = undefined
        global K = undefined
        global rm = undefined
        global Wn2 = undefined
        global xA = undefined
        global Wqm = undefined
        global Xx = undefined
        global qR = undefined
        global Rk = undefined
        global update = undefined
        global dictt = undefined
        global kwargsRk = undefined
        global Re = undefined
        global Rf = undefined
        global os.pyRr = undefined
        global Rs = undefined
        global copy = undefined
        global __name__t = undefined
        global __module__R = undefined
        global Rh = undefined
        global Ri = undefined
        global NameErrorRj = undefined
        global Rl = undefined
        global Rm = undefined
        global Rn = undefined
        global Ro = undefined
        global Rp = undefined
        global Rr = undefined
        global Ru = undefined
        global sf = undefined
        global _ = undefined
        global R_ = undefined
        global RN = undefined
        global Rg = undefined
        global os.pyRh = undefined
        global Rt = undefined
        global os.pyRl = undefined
        global os.pyRm = undefined
        global os.pyRu = undefined
        global Rv = undefined
        global Rw = undefined
        global Rx = undefined
        global Rj = undefined
        global Get = undefined
        global an = undefined
        global variable = undefined
        global None = undefined
        global it = undefined
        global doesn = undefined
        global exist.The = undefined
        global optional = undefined
        global second = undefined
        global can = undefined
        global specify = undefined
        global alternate = undefined
        global default.RN = undefined
        global default = undefined
        global getenv = <function getenv at 0x2410de8>
        global Rz = undefined
        global globals = undefined
        global _exists = <function _exists at 0x2416500>
        global forkt = undefined
        global spawnvRA = undefined
        global sV = undefined
        global y0 = undefined
        global r.n = undefined
        global Xns = undefined
        global rf = undefined
        global Sx = undefined
        global qi = undefined
        global St = undefined
        global Ni = undefined
        global i = undefined
        global Not = undefined
        global stopped = undefined
        global signaled = undefined
        global exited = undefined
        global P_NOWAITt = undefined
        global waitpidt = undefined
        global WIFSTOPPEDt = undefined
        global WIFSIGNALEDt = undefined
        global WTERMSIGt = undefined
        global WIFEXITEDt = undefined
        global WEXITSTATUSR = undefined
        global pidt = undefined
        global wpidt = undefined
        global sts = undefined
        global _spawnvef = <function _spawnvef at 0x2416578>
        global spawnv = <function spawnv at 0x24165f0>
        mode = 511
        global integer = undefined
        global arguments = undefined
        global subprocess.If = undefined
        global P_NOWAIT = 1
        global pid = undefined
        global process.If = undefined
        global P_WAIT = 0
        global process = undefined
        global exit = undefined
        global code = undefined
        global exits = undefined
        global normally = undefined
        global otherwise = undefined
        global SIG = undefined
        global where = undefined
        global signal = undefined
        global that = undefined
        global killed = undefined
        global it.N = undefined
        global spawnve = <function spawnve at 0x2416668>
        global subprocess = undefined
        global specified = undefined
        global environment.If = undefined
        global it.R = undefined
        global spawnve5 = undefined
        global s8 = undefined
        global spawnvp = <function spawnvp at 0x24166e0>
        global looked = undefined
        global spawnvpA = undefined
        global spawnvpe = <function spawnvpe at 0x2416758>
        global supplied = undefined
        global spawnvpeK = undefined
        global spawnl = <function spawnl at 0x24167d0>
        global spawnlY = undefined
        global spawnle = <function spawnle at 0x2416848>
        global it.i = undefined
        global spawnleb = undefined
        global sW = undefined
        global spawnlp = <function spawnlp at 0x24168c0>
        global spawnlpt = undefined
        global spawnlpe = <function spawnlpe at 0x2416938>
        global popen2t = undefined
        global tc = undefined
        global l = undefined
        global shell = undefined
        global command = undefined
        global sub = undefined
        global process.On = undefined
        global UNIX = undefined
        global sequence = undefined
        global case = undefined
        global will = undefined
        global passed = undefined
        global directly = undefined
        global to = undefined
        global program = undefined
        global without = undefined
        global intervention = undefined
        global os.spawnv.If = undefined
        global string = undefined
        global os.system.If = undefined
        global sets = undefined
        global buffer = undefined
        global size = undefined
        global I = undefined
        global O = undefined
        global pipes.The = undefined
        global objects = undefined
        global child_stdin = undefined
        global child_stdout = undefined
        global are = undefined
        global returned.i = undefined
        global Ns4 = undefined
        global os.popen2 = undefined
        global deprecated.Use = undefined
        global module.t = undefined
        global stackleveli = undefined
        global shellt = undefined
        global bufsizet = undefined
        global stdint = undefined
        global stdoutt = undefined
        global close_fds = undefined
        global warningst = undefined
        global warnt = undefined
        global DeprecationWarningt = undefined
        global subprocesst = undefined
        global PIPEt = undefined
        global Popent = undefined
        global isinstancet = undefined
        global basestringt = undefined
        global TrueR = undefined
        global cmdR = undefined
        global msgR = undefined
        global p = undefined
        global popen3c = undefined
        global child_stderr = undefined
        global os.popen3 = undefined
        global module.R = undefined
        global stderrR = undefined
        global popen4c = undefined
        global child_stdout_stderr = undefined
        global os.popen4 = undefined
        global STDOUTR = undefined
        global stat_result = <type 'posix.stat_result'>
        global tupRs = undefined
        global _make_stat_result = <function _make_stat_result at 0x24190c8>
        global __reduce__R = undefined
        global srt = undefined
        global typeRC = undefined
        global _pickle_stat_result = <function _pickle_stat_result at 0x2419140>
        global statvfs_result = <type 'posix.statvfs_result'>
        global _make_statvfs_result = <function _make_statvfs_result at 0x24191b8>
        global _pickle_statvfs_result = <function _pickle_statvfs_result at 0x2419230>
        global urandomc = undefined
        global r8 = undefined
        global Xz = undefined
        global x3 = undefined
        global rw = undefined
        global qE = undefined
        global WWd = undefined
        global X = undefined
        global urandom = <function urandom at 0x24192a8>
        global str = undefined
        global Return = undefined
        global random = undefined
        global bytes = undefined
        global suitable = undefined
        global cryptographic = undefined
        global use.s = undefined
        global dev = undefined
        global urandoms = undefined
        global equivalent = undefined
        global foundRZ = undefined
        global opent = undefined
        global O_RDONLYR = undefined
        global IOErrort = undefined
        global NotImplementedErrort = undefined
        global lent = undefined
        global readt = undefined
        global close = <built-in function close>
        global _urandomfdt = undefined
        global bs = undefined
        global os2s = undefined
        global nt = undefined
        global Y = undefined
        global __doc__RO = undefined
        global builtin_module_namest = undefined
        global _namesR = undefined
        global ImportErrort = undefined
        global posixpathR = undefined
        global extendR = undefined
        global ntpathR = undefined
        global versiont = undefined
        global findt = undefined
        global os2emxpatht = undefined
        global _emx_linkR = undefined
        global riscospatht = undefined
        global modulest = undefined
        global os.pathR = undefined
        global FalseR6 = undefined
        global R5 = undefined
        global riscosenvironR = undefined
        global IterableUserDictRz = undefined
        global P_WAITR = undefined
        global P_NOWAITOR = undefined
        global copy_regt = undefined
        global _copy_regR = undefined
        global pickleR = undefined
        global module = undefined
        global s0 = undefined
    158 
    159 def removedirs(name):
    160     """removedirs(path)
    161 
    162     Super-rmdir; remove a leaf directory and all empty intermediate
    163     ones.  Works like rmdir except that, if the leaf directory is
    164     successfully removed, directories corresponding to rightmost path
    165     segments will be pruned away until either the whole path is
    166     consumed or an error occurs.  Errors during this latter phase are
    167     ignored -- they generally mean that a directory was not empty.
    168 
    169     """
    170     rmdir(name)
    171     head, tail = path.split(name)
    172     if not tail:

OSError: [Errno 13] Permission denied: '/afs/athena.mit.edu/user/y/y/yygu/.ipython'

***************************************************************************

History of session input:

*** Last line of input (may not be in above history):
